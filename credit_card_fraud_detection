{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":23498,"sourceType":"datasetVersion","datasetId":310},{"sourceId":10235844,"sourceType":"datasetVersion","datasetId":6329315}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:33:41.669679Z","iopub.execute_input":"2025-02-26T10:33:41.670045Z","iopub.status.idle":"2025-02-26T10:33:43.329776Z","shell.execute_reply.started":"2025-02-26T10:33:41.670015Z","shell.execute_reply":"2025-02-26T10:33:43.328663Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/credit-card-transaction-dataset-fraud-detection/data.csv\n/kaggle/input/creditcardfraud/creditcard.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# Import data processing and visualization libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:33:43.331128Z","iopub.execute_input":"2025-02-26T10:33:43.331793Z","iopub.status.idle":"2025-02-26T10:33:45.426655Z","shell.execute_reply.started":"2025-02-26T10:33:43.331750Z","shell.execute_reply":"2025-02-26T10:33:45.425470Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"%matplotlib inline","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:33:45.428852Z","iopub.execute_input":"2025-02-26T10:33:45.429481Z","iopub.status.idle":"2025-02-26T10:33:45.434710Z","shell.execute_reply.started":"2025-02-26T10:33:45.429451Z","shell.execute_reply":"2025-02-26T10:33:45.433430Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"os.listdir('/kaggle/input/')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:33:45.436676Z","iopub.execute_input":"2025-02-26T10:33:45.437122Z","iopub.status.idle":"2025-02-26T10:33:45.461277Z","shell.execute_reply.started":"2025-02-26T10:33:45.437079Z","shell.execute_reply":"2025-02-26T10:33:45.460060Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"['credit-card-transaction-dataset-fraud-detection', 'creditcardfraud']"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/credit-card-transaction-dataset-fraud-detection/data.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:33:45.462213Z","iopub.execute_input":"2025-02-26T10:33:45.462620Z","iopub.status.idle":"2025-02-26T10:35:46.510077Z","shell.execute_reply.started":"2025-02-26T10:33:45.462584Z","shell.execute_reply":"2025-02-26T10:35:46.508969Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"df.info()\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:46.511120Z","iopub.execute_input":"2025-02-26T10:35:46.511381Z","iopub.status.idle":"2025-02-26T10:35:46.582171Z","shell.execute_reply.started":"2025-02-26T10:35:46.511361Z","shell.execute_reply":"2025-02-26T10:35:46.581217Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 8580255 entries, 0 to 8580254\nData columns (total 44 columns):\n #   Column                      Dtype  \n---  ------                      -----  \n 0   ssn                         object \n 1   cc_num                      int64  \n 2   first                       object \n 3   last                        object \n 4   gender                      object \n 5   street                      object \n 6   city                        object \n 7   state                       object \n 8   zip                         int64  \n 9   lat                         float64\n 10  long                        float64\n 11  city_pop                    int64  \n 12  job                         object \n 13  dob                         object \n 14  acct_num                    int64  \n 15  profile                     object \n 16  trans_num                   object \n 17  trans_date                  object \n 18  trans_time                  object \n 19  unix_time                   int64  \n 20  category                    object \n 21  amt                         float64\n 22  is_fraud                    int64  \n 23  merchant                    object \n 24  merch_lat                   float64\n 25  merch_long                  float64\n 26  customer_num_trans_1_day    int64  \n 27  customer_num_trans_7_day    int64  \n 28  customer_num_trans_30_day   int64  \n 29  trans_time_secs             int64  \n 30  trans_time_hrs              int64  \n 31  trans_time_is_night         int64  \n 32  trans_time_day              int64  \n 33  trans_date_is_weekend       int64  \n 34  customer_avg_amout_1_day    float64\n 35  customer_avg_amount_7_day   float64\n 36  customer_avg_amount_30_day  float64\n 37  merchant_num_trans_1_day    float64\n 38  merchant_num_trans_7_day    float64\n 39  merchant_num_trans_30_day   float64\n 40  merchant_risk_1_day         int64  \n 41  merchant_risk_7_day         int64  \n 42  merchant_risk_30_day        int64  \n 43  merchant_risk_90_day        int64  \ndtypes: float64(11), int64(18), object(15)\nmemory usage: 2.8+ GB\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"           ssn            cc_num      first      last gender  \\\n0  024-79-2449    30417925130692    Felicia     Gomez      F   \n1  269-54-1394  4224979584238239    Jeffrey   Mathews      M   \n2  527-16-1817  4056555304074394  Christina     Ellis      F   \n3  314-98-4472  6011544296258081     Steven    Murphy      M   \n4  390-83-9961   374917808855764    Cynthia  Martinez      F   \n\n                          street              city state    zip      lat  ...  \\\n0           486 Benson Stravenue          Rockford    IL  61107  42.2786  ...   \n1     5430 Leslie Flat Suite 854             Ceres    CA  95307  37.5833  ...   \n2      75933 Harvey Via Apt. 423           Buffalo    NY  14224  42.8371  ...   \n3   268 Anderson Valley Apt. 958  Mansfield Center    CT   6250  41.7698  ...   \n4  53164 Deborah Square Apt. 739           Anaheim    CA  92804  33.8186  ...   \n\n   customer_avg_amout_1_day  customer_avg_amount_7_day  \\\n0                      4.01                      18.27   \n1                     88.83                      77.27   \n2                     66.96                      67.47   \n3                     15.32                      58.22   \n4                     28.81                      44.64   \n\n  customer_avg_amount_30_day merchant_num_trans_1_day  \\\n0                       6.97                  4824.23   \n1                       8.06                  3243.55   \n2                      43.41                  4242.22   \n3                      52.05                  4303.16   \n4                      24.65                  2424.13   \n\n   merchant_num_trans_7_day merchant_num_trans_30_day merchant_risk_1_day  \\\n0                  73065.81                 141799.95                   4   \n1                  51496.77                1093950.50                   3   \n2                  26384.49                1005859.33                   6   \n3                   3476.36                 226662.34                   3   \n4                  32215.14                  36989.60                   2   \n\n  merchant_risk_7_day merchant_risk_30_day  merchant_risk_90_day  \n0                  13                   20                    14  \n1                  10                   11                    28  \n2                  14                   23                    48  \n3                  11                   14                    14  \n4                  13                   16                    20  \n\n[5 rows x 44 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ssn</th>\n      <th>cc_num</th>\n      <th>first</th>\n      <th>last</th>\n      <th>gender</th>\n      <th>street</th>\n      <th>city</th>\n      <th>state</th>\n      <th>zip</th>\n      <th>lat</th>\n      <th>...</th>\n      <th>customer_avg_amout_1_day</th>\n      <th>customer_avg_amount_7_day</th>\n      <th>customer_avg_amount_30_day</th>\n      <th>merchant_num_trans_1_day</th>\n      <th>merchant_num_trans_7_day</th>\n      <th>merchant_num_trans_30_day</th>\n      <th>merchant_risk_1_day</th>\n      <th>merchant_risk_7_day</th>\n      <th>merchant_risk_30_day</th>\n      <th>merchant_risk_90_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>024-79-2449</td>\n      <td>30417925130692</td>\n      <td>Felicia</td>\n      <td>Gomez</td>\n      <td>F</td>\n      <td>486 Benson Stravenue</td>\n      <td>Rockford</td>\n      <td>IL</td>\n      <td>61107</td>\n      <td>42.2786</td>\n      <td>...</td>\n      <td>4.01</td>\n      <td>18.27</td>\n      <td>6.97</td>\n      <td>4824.23</td>\n      <td>73065.81</td>\n      <td>141799.95</td>\n      <td>4</td>\n      <td>13</td>\n      <td>20</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>269-54-1394</td>\n      <td>4224979584238239</td>\n      <td>Jeffrey</td>\n      <td>Mathews</td>\n      <td>M</td>\n      <td>5430 Leslie Flat Suite 854</td>\n      <td>Ceres</td>\n      <td>CA</td>\n      <td>95307</td>\n      <td>37.5833</td>\n      <td>...</td>\n      <td>88.83</td>\n      <td>77.27</td>\n      <td>8.06</td>\n      <td>3243.55</td>\n      <td>51496.77</td>\n      <td>1093950.50</td>\n      <td>3</td>\n      <td>10</td>\n      <td>11</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>527-16-1817</td>\n      <td>4056555304074394</td>\n      <td>Christina</td>\n      <td>Ellis</td>\n      <td>F</td>\n      <td>75933 Harvey Via Apt. 423</td>\n      <td>Buffalo</td>\n      <td>NY</td>\n      <td>14224</td>\n      <td>42.8371</td>\n      <td>...</td>\n      <td>66.96</td>\n      <td>67.47</td>\n      <td>43.41</td>\n      <td>4242.22</td>\n      <td>26384.49</td>\n      <td>1005859.33</td>\n      <td>6</td>\n      <td>14</td>\n      <td>23</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>314-98-4472</td>\n      <td>6011544296258081</td>\n      <td>Steven</td>\n      <td>Murphy</td>\n      <td>M</td>\n      <td>268 Anderson Valley Apt. 958</td>\n      <td>Mansfield Center</td>\n      <td>CT</td>\n      <td>6250</td>\n      <td>41.7698</td>\n      <td>...</td>\n      <td>15.32</td>\n      <td>58.22</td>\n      <td>52.05</td>\n      <td>4303.16</td>\n      <td>3476.36</td>\n      <td>226662.34</td>\n      <td>3</td>\n      <td>11</td>\n      <td>14</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>390-83-9961</td>\n      <td>374917808855764</td>\n      <td>Cynthia</td>\n      <td>Martinez</td>\n      <td>F</td>\n      <td>53164 Deborah Square Apt. 739</td>\n      <td>Anaheim</td>\n      <td>CA</td>\n      <td>92804</td>\n      <td>33.8186</td>\n      <td>...</td>\n      <td>28.81</td>\n      <td>44.64</td>\n      <td>24.65</td>\n      <td>2424.13</td>\n      <td>32215.14</td>\n      <td>36989.60</td>\n      <td>2</td>\n      <td>13</td>\n      <td>16</td>\n      <td>20</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 44 columns</p>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"df_copy = df.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:46.583070Z","iopub.execute_input":"2025-02-26T10:35:46.583324Z","iopub.status.idle":"2025-02-26T10:35:48.470668Z","shell.execute_reply.started":"2025-02-26T10:35:46.583303Z","shell.execute_reply":"2025-02-26T10:35:48.469749Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"# **Memory Management**\nmemory usage will be reduced after converting `64bits` to `32bits`","metadata":{}},{"cell_type":"code","source":"#1. Selecting the columns with float64 and int64\n\nfloat_cols = df.select_dtypes('float64').columns\nint_cols = df.select_dtypes('int64').columns\n\n#2. conversion from float64 to float32\ndf[float_cols] = df_copy[float_cols].astype('float32')\ndf[int_cols] = df_copy[int_cols].astype('int32')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:48.473937Z","iopub.execute_input":"2025-02-26T10:35:48.474220Z","iopub.status.idle":"2025-02-26T10:35:50.154094Z","shell.execute_reply.started":"2025-02-26T10:35:48.474197Z","shell.execute_reply":"2025-02-26T10:35:50.153074Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:50.155996Z","iopub.execute_input":"2025-02-26T10:35:50.156346Z","iopub.status.idle":"2025-02-26T10:35:50.169080Z","shell.execute_reply.started":"2025-02-26T10:35:50.156320Z","shell.execute_reply":"2025-02-26T10:35:50.167618Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 8580255 entries, 0 to 8580254\nData columns (total 44 columns):\n #   Column                      Dtype  \n---  ------                      -----  \n 0   ssn                         object \n 1   cc_num                      int32  \n 2   first                       object \n 3   last                        object \n 4   gender                      object \n 5   street                      object \n 6   city                        object \n 7   state                       object \n 8   zip                         int32  \n 9   lat                         float32\n 10  long                        float32\n 11  city_pop                    int32  \n 12  job                         object \n 13  dob                         object \n 14  acct_num                    int32  \n 15  profile                     object \n 16  trans_num                   object \n 17  trans_date                  object \n 18  trans_time                  object \n 19  unix_time                   int32  \n 20  category                    object \n 21  amt                         float32\n 22  is_fraud                    int32  \n 23  merchant                    object \n 24  merch_lat                   float32\n 25  merch_long                  float32\n 26  customer_num_trans_1_day    int32  \n 27  customer_num_trans_7_day    int32  \n 28  customer_num_trans_30_day   int32  \n 29  trans_time_secs             int32  \n 30  trans_time_hrs              int32  \n 31  trans_time_is_night         int32  \n 32  trans_time_day              int32  \n 33  trans_date_is_weekend       int32  \n 34  customer_avg_amout_1_day    float32\n 35  customer_avg_amount_7_day   float32\n 36  customer_avg_amount_30_day  float32\n 37  merchant_num_trans_1_day    float32\n 38  merchant_num_trans_7_day    float32\n 39  merchant_num_trans_30_day   float32\n 40  merchant_risk_1_day         int32  \n 41  merchant_risk_7_day         int32  \n 42  merchant_risk_30_day        int32  \n 43  merchant_risk_90_day        int32  \ndtypes: float32(11), int32(18), object(15)\nmemory usage: 1.9+ GB\n","output_type":"stream"}],"execution_count":9},{"cell_type":"markdown","source":"# Feature Selection\nusing `mutual info classifier`","metadata":{}},{"cell_type":"code","source":"numerical_cols = df.iloc[:,27:].columns\nnumerical_cols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:50.170173Z","iopub.execute_input":"2025-02-26T10:35:50.170476Z","iopub.status.idle":"2025-02-26T10:35:50.586418Z","shell.execute_reply.started":"2025-02-26T10:35:50.170451Z","shell.execute_reply":"2025-02-26T10:35:50.585370Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"Index(['customer_num_trans_7_day', 'customer_num_trans_30_day',\n       'trans_time_secs', 'trans_time_hrs', 'trans_time_is_night',\n       'trans_time_day', 'trans_date_is_weekend', 'customer_avg_amout_1_day',\n       'customer_avg_amount_7_day', 'customer_avg_amount_30_day',\n       'merchant_num_trans_1_day', 'merchant_num_trans_7_day',\n       'merchant_num_trans_30_day', 'merchant_risk_1_day',\n       'merchant_risk_7_day', 'merchant_risk_30_day', 'merchant_risk_90_day'],\n      dtype='object')"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"X = df[numerical_cols]\ny = df['is_fraud']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:50.587491Z","iopub.execute_input":"2025-02-26T10:35:50.587805Z","iopub.status.idle":"2025-02-26T10:35:50.991114Z","shell.execute_reply.started":"2025-02-26T10:35:50.587772Z","shell.execute_reply":"2025-02-26T10:35:50.990175Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"from sklearn.feature_selection import mutual_info_classif\n\nmi_scores = mutual_info_classif(X, y)\nmi_df = pd.DataFrame({'Feature': numerical_cols, 'MI Score': mi_scores})\nmi_df = mi_df.sort_values(by='MI Score', ascending=False)\nprint(mi_df)","metadata":{"execution":{"iopub.status.busy":"2025-02-24T20:51:00.805693Z","iopub.execute_input":"2025-02-24T20:51:00.806026Z","iopub.status.idle":"2025-02-24T21:15:14.530163Z","shell.execute_reply.started":"2025-02-24T20:51:00.806000Z","shell.execute_reply":"2025-02-24T21:15:14.529391Z"}}},{"cell_type":"code","source":"selected_features = [numerical_cols[5], numerical_cols[13], numerical_cols[0], numerical_cols[1],\n                numerical_cols[14], numerical_cols[15], numerical_cols[3], numerical_cols[16]]\nX = df[selected_features]\ny = df['is_fraud']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:50.992197Z","iopub.execute_input":"2025-02-26T10:35:50.992464Z","iopub.status.idle":"2025-02-26T10:35:51.200185Z","shell.execute_reply.started":"2025-02-26T10:35:50.992440Z","shell.execute_reply":"2025-02-26T10:35:51.199120Z"}},"outputs":[],"execution_count":12},{"cell_type":"markdown","source":"# Useful Visualization Parameters","metadata":{}},{"cell_type":"code","source":"plt.rcParams.update({'font.family': 'serif',\n                    'font.size': 8,\n                    'axes.labelsize': 8,\n                    'axes.titlesize': 8,\n                    'figure.dpi': 300})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:51.200834Z","iopub.execute_input":"2025-02-26T10:35:51.201101Z","iopub.status.idle":"2025-02-26T10:35:51.205732Z","shell.execute_reply.started":"2025-02-26T10:35:51.201080Z","shell.execute_reply":"2025-02-26T10:35:51.204706Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"# EDA\n`pairplot()` and `heatmap` to show feature relationships","metadata":{}},{"cell_type":"markdown","source":"sns.pairplot(X)\nplt.suptitle(\"Pairplot selected features\", y=1.02)","metadata":{"execution":{"iopub.status.busy":"2025-02-24T21:41:30.984889Z","iopub.execute_input":"2025-02-24T21:41:30.985204Z","iopub.status.idle":"2025-02-24T22:07:27.733353Z","shell.execute_reply.started":"2025-02-24T21:41:30.985177Z","shell.execute_reply":"2025-02-24T22:07:27.732433Z"}}},{"cell_type":"markdown","source":"plt.figure(figsize=(12, 8))\nsns.heatmap(X.corr(), annot=True, cmap='coolwarm', fmt='.2f')\nplt.title(\"Correlation Heatmap\")","metadata":{"execution":{"iopub.status.busy":"2025-02-25T09:27:44.102802Z","iopub.execute_input":"2025-02-25T09:27:44.103081Z","iopub.status.idle":"2025-02-25T09:27:46.867218Z","shell.execute_reply.started":"2025-02-25T09:27:44.103059Z","shell.execute_reply":"2025-02-25T09:27:46.866251Z"}}},{"cell_type":"markdown","source":"# Machine Learning Section","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:51.206810Z","iopub.execute_input":"2025-02-26T10:35:51.207112Z","iopub.status.idle":"2025-02-26T10:35:51.943530Z","shell.execute_reply.started":"2025-02-26T10:35:51.207089Z","shell.execute_reply":"2025-02-26T10:35:51.942598Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Display dataset info\nprint(\"Dataset Shape:\", X.shape)\nprint(\"\\nFeature Names:\\n\", X.columns)\nprint(\"\\nTarget Distribution:\\n\", y.value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:51.944350Z","iopub.execute_input":"2025-02-26T10:35:51.944602Z","iopub.status.idle":"2025-02-26T10:35:52.010506Z","shell.execute_reply.started":"2025-02-26T10:35:51.944580Z","shell.execute_reply":"2025-02-26T10:35:52.009278Z"}},"outputs":[{"name":"stdout","text":"Dataset Shape: (8580255, 8)\n\nFeature Names:\n Index(['trans_time_day', 'merchant_risk_1_day', 'customer_num_trans_7_day',\n       'customer_num_trans_30_day', 'merchant_risk_7_day',\n       'merchant_risk_30_day', 'trans_time_hrs', 'merchant_risk_90_day'],\n      dtype='object')\n\nTarget Distribution:\n is_fraud\n0    8485449\n1      94806\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:52.011914Z","iopub.execute_input":"2025-02-26T10:35:52.012232Z","iopub.status.idle":"2025-02-26T10:35:54.370341Z","shell.execute_reply.started":"2025-02-26T10:35:52.012205Z","shell.execute_reply":"2025-02-26T10:35:54.369355Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# Standardize the features\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\ndef evaluate_model(model, X_train, y_train, X_test, y_test):\n    print(f\"\\n{model.__class__.__name__} Results:\")\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n    print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n    print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n    print(\"ROC AUC Score:\", roc_auc_score(y_test, y_pred))\n    \n    # For ROC curve\n    y_pred_proba = model.predict_proba(X_test)[:, 1]\n    fpr, tpr, _ = roc_curve(y_test, y_pred_proba)\n    plt.plot(fpr, tpr, label=f\"{model.__class__.__name__} (AUC = {roc_auc_score(y_test, y_pred_proba):.2f})\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:54.371420Z","iopub.execute_input":"2025-02-26T10:35:54.371686Z","iopub.status.idle":"2025-02-26T10:35:55.582602Z","shell.execute_reply.started":"2025-02-26T10:35:54.371664Z","shell.execute_reply":"2025-02-26T10:35:55.581481Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# Experiment with different algorithms\nmodels = [\n    LogisticRegression(),\n    DecisionTreeClassifier(random_state=42),\n    RandomForestClassifier(random_state=42),\n    GradientBoostingClassifier(random_state=42)\n]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:55.583757Z","iopub.execute_input":"2025-02-26T10:35:55.584066Z","iopub.status.idle":"2025-02-26T10:35:55.588927Z","shell.execute_reply.started":"2025-02-26T10:35:55.584041Z","shell.execute_reply":"2025-02-26T10:35:55.587837Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"import gc\ngc.collect() #free gabbage memory","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:55.590057Z","iopub.execute_input":"2025-02-26T10:35:55.590404Z","iopub.status.idle":"2025-02-26T10:35:55.711304Z","shell.execute_reply.started":"2025-02-26T10:35:55.590371Z","shell.execute_reply":"2025-02-26T10:35:55.710365Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"4"},"metadata":{}}],"execution_count":19},{"cell_type":"markdown","source":"# Plot ROC curves for all models\nplt.figure(figsize=(10, 8))\nlist(map(lambda model: evaluate_model(model, X_train, y_train, X_test, y_test), models))\nplt.plot([0, 1], [0, 1], linestyle='--', color='gray', label='Random Guess')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curves for Different Models')\nplt.legend()\nplt.savefig('/kaggle/working/output.png', dpi=300)","metadata":{"execution":{"iopub.status.busy":"2025-02-25T18:42:43.474324Z","iopub.execute_input":"2025-02-25T18:42:43.474639Z","iopub.status.idle":"2025-02-25T19:30:39.882034Z","shell.execute_reply.started":"2025-02-25T18:42:43.474615Z","shell.execute_reply":"2025-02-25T19:30:39.881139Z"}}},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedKFold, RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report, confusion_matrix\nfrom imblearn.over_sampling import SMOTE\nimport joblib","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:55.712314Z","iopub.execute_input":"2025-02-26T10:35:55.712591Z","iopub.status.idle":"2025-02-26T10:35:56.068705Z","shell.execute_reply.started":"2025-02-26T10:35:55.712568Z","shell.execute_reply":"2025-02-26T10:35:56.067793Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# Handle database imbalance using SMOTE\n## Used SMOTE to address fraud class imbalance\nsmote = SMOTE(random_state=42)\nX_resampled, y_resampled = smote.fit_resample(X, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:35:56.069590Z","iopub.execute_input":"2025-02-26T10:35:56.070089Z","iopub.status.idle":"2025-02-26T10:36:12.301383Z","shell.execute_reply.started":"2025-02-26T10:35:56.070057Z","shell.execute_reply":"2025-02-26T10:36:12.299988Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"# Model Training with Cross-Validation\n# Choose best_model from ROC plot result \n# Model Training used was the with Stratified K-Fold\n## Stratified K-Fold for better performance on imbalanced data \n\nmodel = GradientBoostingClassifier(random_state=42)\nkfold = StratifiedKFold(n_splits=5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:36:12.303045Z","iopub.execute_input":"2025-02-26T10:36:12.303363Z","iopub.status.idle":"2025-02-26T10:36:12.309060Z","shell.execute_reply.started":"2025-02-26T10:36:12.303335Z","shell.execute_reply":"2025-02-26T10:36:12.307788Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"# Hyperparameter Tuning with RandomizedSearchCV \n## Replaced GridSearchCV with a much faster RandomizedSearchCV due to volume of dataset\n### and memory efficiency, n_jobs for parallel computing \nparam_dist = {\n    'n_estimators': [50, 100, 150],\n    'learning_rate': [0.01, 0.1, 0.2],\n    'max_depth': [3, 5, 7]\n}\n\nrandom_search = RandomizedSearchCV(model, param_distributions=param_dist, n_iter=10, cv=kfold, scoring='roc_auc', n_jobs=-1)\nrandom_search.fit(X_train, y_train)\n\nprint(f'Best parameters: {random_search.best_params_}')\nbest_model = random_search.best_estimator_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T10:36:12.314098Z","iopub.execute_input":"2025-02-26T10:36:12.314420Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Section for Model Evaluation\ny_pred = best_model.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\nroc_auc = roc_auc_score(y_test, best_model.predict_proba(X_test)[:, 1])\n\nprint(f'Accuracy: {accuracy:.4f}')\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')\nprint(f'ROC-AUC Score: {roc_auc:.4f}')\n\nprint('\\nClassification Report:\\n', classification_report(y_test, y_pred))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Model Export\njoblib.dump(best_model, '/kaggle/working/credit_card_fraud_model.pkl')\nprint('Model saved as credit_card_fraud_model.pkl')\n\n# Model Explanation of New Moon\nprint('This model is a Random Forest Classifier trained on standardized data with hyperparameter tuning using GridSearchCV. Metrics reported include accuracy, precision, recall, and F1-score. The model is exported as a .pkl file for deployment on other datasets.')","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}